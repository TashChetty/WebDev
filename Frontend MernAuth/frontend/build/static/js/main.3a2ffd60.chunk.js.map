{"version":3,"sources":["auth/Register.js","auth/Login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Register","props","useState","name","email","password","error","data","setData","handleChange","e","target","value","handleSubmit","a","preventDefault","axios","post","headers","history","push","response","className","htmlFor","type","onChange","onClick","Login","res","localStorage","setItem","token","Home","user","setUser","getUser","get","Authorization","getItem","useEffect","removeItem","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3a2ffd60.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Register = (props) => {\n  const [data, setData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    error: null,\n  });\n\n  const { name, email, password, error } = data;\n\n  const handleChange = (e) => {\n    setData({ ...data, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setData({ ...data, error: null });\n      await axios.post(\n        \"https://backendmernauth.onrender.com/api/auth/register\", \n        { name, email, password },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      props.history.push(\"/login\");\n    } catch (err) {\n      setData({ ...data, error: err.response.data.error });\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-2\" />\n      <div className=\"col-sm-8\">\n        <h4 className=\"text-muted text-center mb-5\">Create an account</h4>\n\n        <div className=\"card p-5 shadow\">\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Name</label>\n              <input\n                className=\"form-control\"\n                type=\"name\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className=\"form-control\"\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={handleChange}\n              />\n            </div>\n            {error ? <p className=\"text-danger\">{error}</p> : null}\n            <div className=\"text-center\">\n              <button className=\"btn btn-primary\" onClick={handleSubmit}>\n                Register\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div className=\"col-sm-2\" />\n    </div>\n  );\n};\n\nexport default Register;\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\n\nconst Login = (props) => {\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n    error: null,\n  });\n\n  const { email, password, error } = data;\n\n  const handleChange = (e) => {\n    setData({ ...data, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setData({ ...data, error: null });\n      const res = await axios.post(\n        \"https://backendmernauth.onrender.com/api/auth/login\",\n        \n        { email, password },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      localStorage.setItem(\"token\", res.data.token);\n      props.history.push(\"/\");\n    } catch (err) {\n      setData({ ...data, error: err.response.data.error });\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-2\" />\n      <div className=\"col-sm-8\">\n        <h4 className=\"text-muted text-center mb-5\">Log into your account</h4>\n        <div className=\"card p-5 shadow\">\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className=\"form-control\"\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={handleChange}\n              />\n            </div>\n            {error ? <p className=\"text-danger\">{error}</p> : null}\n            <div className=\"text-center\">\n              <button className=\"btn btn-primary\" onClick={handleSubmit}>\n                Login\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div className=\"col-sm-2\" />\n    </div>\n  );\n};\n\nexport default Login;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Home = (props) => {\n  const [user, setUser] = useState(null);\n\n  const getUser = async () => {\n    const res = await axios.get(\"https://backendmernauth.onrender.com/api/auth\", {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    });\n    setUser(res.data);\n  };\n  useEffect(() => {\n    getUser();\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    props.history.push(\"/login\");\n  };\n\n  if (!localStorage.getItem(\"token\")) {\n    props.history.push(\"/login\");\n  }\n  return (\n    <div className=\"m-5\">\n      <div className=\"jumbotron\">\n        <p className=\"lead\">Welcome {user && user.name}</p>\n        <button className=\"btn btn-danger\" onClick={logout}>\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Register from \"./auth/Register\";\nimport Login from \"./auth/Login\";\nimport Home from \"./Home\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/register\" component={Register} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}